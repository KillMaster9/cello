// Copyright 2023 The Cello Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/volcengine/cello/pkg/provider/volcengine/metadata (interfaces: EC2MetadataIface)

// Package mock_metadata is a generated GoMock package.
package mock_metadata

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEC2MetadataIface is a mock of EC2MetadataIface interface
type MockEC2MetadataIface struct {
	ctrl     *gomock.Controller
	recorder *MockEC2MetadataIfaceMockRecorder
}

// MockEC2MetadataIfaceMockRecorder is the mock recorder for MockEC2MetadataIface
type MockEC2MetadataIfaceMockRecorder struct {
	mock *MockEC2MetadataIface
}

// NewMockEC2MetadataIface creates a new mock instance
func NewMockEC2MetadataIface(ctrl *gomock.Controller) *MockEC2MetadataIface {
	mock := &MockEC2MetadataIface{ctrl: ctrl}
	mock.recorder = &MockEC2MetadataIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEC2MetadataIface) EXPECT() *MockEC2MetadataIfaceMockRecorder {
	return m.recorder
}

// GetMetadata mocks base method
func (m *MockEC2MetadataIface) GetMetadata(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockEC2MetadataIfaceMockRecorder) GetMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockEC2MetadataIface)(nil).GetMetadata), arg0, arg1)
}
