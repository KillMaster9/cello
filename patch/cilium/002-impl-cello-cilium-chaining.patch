From 1508e74ea5755ca55008d936e584afa843604bb1 Mon Sep 17 00:00:00 2001
From: xinwenqiang <xinwenqiang@bytedance.com>
Date: Tue, 18 Jan 2022 20:25:40 +0800
Subject: [PATCH 1/2] impl cello-cilium chaining

---
 daemon/cmd/daemon_main.go                     |  12 ++
 daemon/cmd/endpoint.go                        |   4 +-
 daemon/cmd/gc.go                              | 158 ++++++++++++++++++
 pkg/datapath/connector/ipvlan.go              |  98 +++++++----
 pkg/datapath/linux/config/config.go           |   8 +-
 pkg/datapath/loader/loader.go                 |  16 +-
 pkg/datapath/loader/netlink.go                |   6 +-
 pkg/option/config.go                          |  20 +--
 plugins/cilium-cni/chaining/cello/cello.go    | 157 +++++++++++++++++
 plugins/cilium-cni/cilium-cni.go              |   1 +
 .../k8s.io/apimachinery/pkg/util/uuid/uuid.go |  27 +++
 vendor/modules.txt                            |   1 +
 12 files changed, 461 insertions(+), 47 deletions(-)
 create mode 100644 daemon/cmd/gc.go
 create mode 100644 plugins/cilium-cni/chaining/cello/cello.go
 create mode 100644 vendor/k8s.io/apimachinery/pkg/util/uuid/uuid.go

diff --git a/daemon/cmd/daemon_main.go b/daemon/cmd/daemon_main.go
index 65af7ed..babd522 100644
--- a/daemon/cmd/daemon_main.go
+++ b/daemon/cmd/daemon_main.go
@@ -53,6 +53,8 @@ import (
 	ipamOption "github.com/cilium/cilium/pkg/ipam/option"
 	"github.com/cilium/cilium/pkg/ipmasq"
 	"github.com/cilium/cilium/pkg/k8s"
+	"github.com/cilium/cilium/pkg/k8s/apis/cilium.io/client"
+	ciliumcs "github.com/cilium/cilium/pkg/k8s/client/clientset/versioned"
 	"github.com/cilium/cilium/pkg/k8s/watchers"
 	"github.com/cilium/cilium/pkg/kvstore"
 	"github.com/cilium/cilium/pkg/labels"
@@ -86,6 +88,8 @@ import (
 	"github.com/spf13/viper"
 	"github.com/vishvananda/netlink"
 	"google.golang.org/grpc"
+	"k8s.io/client-go/kubernetes"
+	"k8s.io/client-go/tools/clientcmd"
 )

 const (
@@ -1566,6 +1570,14 @@ func runDaemon() {
 		bootstrapStats.k8sInit.End(true)
 	}

+	cfg, _ := clientcmd.BuildConfigFromFlags("", "")
+	cilium := NewCiliumService(kubernetes.NewForConfigOrDie(cfg), ciliumcs.NewForConfigOrDie(cfg))
+	go cilium.Run()
+
+	if err := client.RegisterCRDs(); err != nil {
+		log.WithError(err).Fatal("Unable to register CRDs")
+	}
+
 	ctx, cancel := context.WithCancel(server.ServerCtx)
 	d, restoredEndpoints, err := NewDaemon(ctx, cancel,
 		WithDefaultEndpointManager(ctx, endpoint.CheckHealth),
diff --git a/daemon/cmd/endpoint.go b/daemon/cmd/endpoint.go
index 6379266..b354bce 100644
--- a/daemon/cmd/endpoint.go
+++ b/daemon/cmd/endpoint.go
@@ -366,7 +366,9 @@ func (d *Daemon) createEndpoint(ctx context.Context, owner regeneration.Owner, e
 		if err != nil {
 			return invalidDataError(ep, err)
 		} else if oldEp != nil {
-			return invalidDataError(ep, fmt.Errorf("IP %s is already in use", id))
+			oldEp.Logger("api").Warning("endpoint conflicted, deleting")
+			d.deleteEndpoint(oldEp)
+			// return invalidDataError(ep, fmt.Errorf("IP %s is already in use", id))
 		}
 	}

diff --git a/daemon/cmd/gc.go b/daemon/cmd/gc.go
new file mode 100644
index 0000000..2ddcb2d
--- /dev/null
+++ b/daemon/cmd/gc.go
@@ -0,0 +1,158 @@
+package cmd
+
+import (
+	"context"
+	"fmt"
+	"os"
+	"time"
+
+	"github.com/cilium/cilium/operator/identity"
+	v2 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2"
+	ciliumcs "github.com/cilium/cilium/pkg/k8s/client/clientset/versioned"
+	"github.com/sirupsen/logrus"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/util/uuid"
+	"k8s.io/apimachinery/pkg/util/wait"
+	k8scs "k8s.io/client-go/kubernetes"
+	"k8s.io/client-go/tools/leaderelection"
+	"k8s.io/client-go/tools/leaderelection/resourcelock"
+)
+
+const logFieldCilium = "cilium"
+const logFieldIdentity = "identity"
+
+type Cilium struct {
+	Client       k8scs.Interface
+	CiliumClient ciliumcs.Interface
+	GCInterval   time.Duration
+}
+
+// NewCiliumService create a new CiliumService
+func NewCiliumService(client k8scs.Interface, ciliumClient ciliumcs.Interface) *Cilium {
+	return &Cilium{
+		Client:       client,
+		CiliumClient: ciliumClient,
+		GCInterval:   30 * time.Minute,
+	}
+}
+
+// Run 通过Kubernetes中的leaderelection实现组件高可用
+func (c *Cilium) Run() {
+	daemonNamespace := os.Getenv("POD_NAMESPACE")
+	if len(daemonNamespace) == 0 {
+		daemonNamespace = "kube-system"
+	}
+	id := fmt.Sprintf("%s_%s_%s", daemonNamespace, os.Getenv("NODENAME"), uuid.NewUUID())
+
+	lock := &resourcelock.LeaseLock{
+		LeaseMeta: metav1.ObjectMeta{
+			Name:      "cello-cilium-lock",
+			Namespace: daemonNamespace,
+		},
+		Client: c.Client.CoordinationV1(),
+		LockConfig: resourcelock.ResourceLockConfig{
+			Identity: id,
+		},
+	}
+	// start the leader election code loop
+	go func() {
+		for {
+			leaderelection.RunOrDie(context.TODO(), leaderelection.LeaderElectionConfig{
+				Lock:            lock,
+				ReleaseOnCancel: true,
+				LeaseDuration:   170 * time.Second,
+				RenewDeadline:   80 * time.Second,
+				RetryPeriod:     60 * time.Second,
+				Callbacks: leaderelection.LeaderCallbacks{
+					OnStartedLeading: func(ctx context.Context) {
+						c.GC(ctx)
+					},
+					OnStoppedLeading: func() {
+						logrus.Infof("leader lost")
+					},
+					OnNewLeader: func(identity string) {
+						if identity == id {
+							// I just got the lock
+							return
+						}
+						logrus.Infof("new leader elected: %s", identity)
+					},
+				},
+			})
+			time.Sleep(10. * time.Second)
+		}
+	}()
+}
+
+// https://docs.cilium.io/en/v1.8/concepts/terminology/
+
+func (c *Cilium) GC(ctx context.Context) {
+	identityHeartbeat := identity.NewIdentityHeartbeatStore(2 * c.GCInterval)
+
+	wait.JitterUntil(func() {
+		identities, err := c.CiliumClient.CiliumV2().CiliumIdentities().List(context.TODO(), v1.ListOptions{ResourceVersion: "0", TimeoutSeconds: func(t int64) *int64 { return &t }(60)})
+		if err != nil {
+			logrus.WithError(err).Error("Unable to list cilium identities")
+			return
+		}
+		eps, err := c.CiliumClient.CiliumV2().CiliumEndpoints("").List(context.TODO(), v1.ListOptions{ResourceVersion: "0", TimeoutSeconds: func(t int64) *int64 { return &t }(60)})
+		if err != nil {
+			logrus.WithError(err).Error("Unable to list cilium endpoints")
+			return
+		}
+
+		timeNow := time.Now()
+		for _, ciliumIdentity := range identities.Items {
+			for _, ep := range eps.Items {
+				if ep.Status.Identity != nil && fmt.Sprintf("%d", ep.Status.Identity.ID) == ciliumIdentity.Name {
+					// If the ciliumIdentity is alive then mark it as alive
+					identityHeartbeat.MarkAlive(ciliumIdentity.Name, timeNow)
+					logrus.WithFields(logrus.Fields{
+						logFieldIdentity: ciliumIdentity.Name,
+					}).Debugf("Mark identity in use %s", ciliumIdentity.Name)
+					continue
+				}
+			}
+
+			if !identityHeartbeat.IsAlive(ciliumIdentity.Name) {
+				logrus.WithFields(logrus.Fields{
+					logFieldIdentity: ciliumIdentity.Name,
+				}).Debug("Deleting unused identity")
+				if err := c.deleteIdentity(ctx, &ciliumIdentity); err != nil {
+					logrus.WithError(err).WithFields(logrus.Fields{
+						logFieldIdentity: ciliumIdentity.Name,
+					}).Error("Deleting unused identity")
+					// If Context was canceled we should break
+					if ctx.Err() != nil {
+						break
+					}
+				}
+			}
+		}
+
+		identityHeartbeat.GC()
+	}, c.GCInterval, 1.1, false, ctx.Done())
+	logrus.WithField(logFieldCilium, "cilium").Debugf("GC loop end")
+}
+
+// deleteIdentity deletes an identity. It includes the resource version and
+// will error if the object has since been changed.
+func (c *Cilium) deleteIdentity(ctx context.Context, identity *v2.CiliumIdentity) error {
+	err := c.CiliumClient.CiliumV2().CiliumIdentities().Delete(
+		ctx,
+		identity.Name,
+		metav1.DeleteOptions{
+			Preconditions: &metav1.Preconditions{
+				UID:             &identity.UID,
+				ResourceVersion: &identity.ResourceVersion,
+			},
+		})
+	if err != nil {
+		logrus.WithError(err).Error("Unable to delete identity")
+	} else {
+		logrus.WithField(logFieldIdentity, identity.GetName()).Info("Garbage collected identity")
+	}
+
+	return err
+}
diff --git a/pkg/datapath/connector/ipvlan.go b/pkg/datapath/connector/ipvlan.go
index de33de8..372e102 100644
--- a/pkg/datapath/connector/ipvlan.go
+++ b/pkg/datapath/connector/ipvlan.go
@@ -40,13 +40,23 @@ func getEntryProgInstructions(fd int) asm.Instructions {
 	}
 }

-// setupIpvlanInRemoteNs creates a tail call map, renames the netdevice inside
+func getIngressEntryProgInstructions(fd int) asm.Instructions {
+	return asm.Instructions{
+		asm.LoadMapPtr(asm.R2, fd),
+		asm.Mov.Imm(asm.R3, 1),
+		asm.FnTailCall.Call(),
+		asm.Mov.Imm(asm.R0, 0),
+		asm.Return(),
+	}
+}
+
+// SetupIpvlanInRemoteNs creates a tail call map, renames the netdevice inside
 // the target netns and attaches a BPF program to it on egress path which
 // then jumps into the tail call map index 0.
 //
 // NB: Do not close the returned map before it has been pinned. Otherwise,
 // the map will be destroyed.
-func setupIpvlanInRemoteNs(netNs ns.NetNS, srcIfName, dstIfName string) (*ebpf.Map, error) {
+func SetupIpvlanInRemoteNs(netNs ns.NetNS, srcIfName, dstIfName string, ingress, egress bool) (*ebpf.Map, error) {
 	rl := unix.Rlimit{
 		Cur: unix.RLIM_INFINITY,
 		Max: unix.RLIM_INFINITY,
@@ -61,7 +71,7 @@ func setupIpvlanInRemoteNs(netNs ns.NetNS, srcIfName, dstIfName string) (*ebpf.M
 		Type:       ebpf.ProgramArray,
 		KeySize:    4,
 		ValueSize:  4,
-		MaxEntries: 1,
+		MaxEntries: 2,
 	})
 	if err != nil {
 		return nil, fmt.Errorf("failed to create root BPF map for %q: %s", dstIfName, err)
@@ -95,33 +105,63 @@ func setupIpvlanInRemoteNs(netNs ns.NetNS, srcIfName, dstIfName string) (*ebpf.M
 			return fmt.Errorf("failed to create clsact qdisc on %q: %s", dstIfName, err)
 		}

-		prog, err := ebpf.NewProgram(&ebpf.ProgramSpec{
-			Type:         ebpf.SchedCLS,
-			Instructions: getEntryProgInstructions(m.FD()),
-			License:      "ASL2",
-		})
-		if err != nil {
-			return fmt.Errorf("failed to load root BPF prog for %q: %s", dstIfName, err)
-		}
+		if egress {
+			prog, err := ebpf.NewProgram(&ebpf.ProgramSpec{
+				Type:         ebpf.SchedCLS,
+				Instructions: getEntryProgInstructions(m.FD()),
+				License:      "ASL2",
+			})
+			if err != nil {
+				return fmt.Errorf("failed to load root BPF prog for %q: %s", dstIfName, err)
+			}

-		filterAttrs := netlink.FilterAttrs{
-			LinkIndex: ipvlan.Attrs().Index,
-			Parent:    netlink.HANDLE_MIN_EGRESS,
-			Handle:    netlink.MakeHandle(0, 1),
-			Protocol:  3,
-			Priority:  1,
-		}
-		filter := &netlink.BpfFilter{
-			FilterAttrs:  filterAttrs,
-			Fd:           prog.FD(),
-			Name:         "polEntry",
-			DirectAction: true,
-		}
-		if err = netlink.FilterAdd(filter); err != nil {
-			prog.Close()
-			return fmt.Errorf("failed to create cls_bpf filter on %q: %s", dstIfName, err)
+			filterAttrs := netlink.FilterAttrs{
+				LinkIndex: ipvlan.Attrs().Index,
+				Parent:    netlink.HANDLE_MIN_EGRESS,
+				Handle:    netlink.MakeHandle(0, 1),
+				Protocol:  3,
+				Priority:  1,
+			}
+			filter := &netlink.BpfFilter{
+				FilterAttrs:  filterAttrs,
+				Fd:           prog.FD(),
+				Name:         "polEntry",
+				DirectAction: true,
+			}
+			if err = netlink.FilterAdd(filter); err != nil {
+				prog.Close()
+				return fmt.Errorf("failed to create cls_bpf filter on %q: %s", dstIfName, err)
+			}
 		}

+		if ingress {
+			prog, err := ebpf.NewProgram(&ebpf.ProgramSpec{
+				Type:         ebpf.SchedCLS,
+				Instructions: getIngressEntryProgInstructions(m.FD()),
+				License:      "ASL2",
+			})
+			if err != nil {
+				return fmt.Errorf("failed to load root BPF prog for %q: %s", dstIfName, err)
+			}
+
+			filterAttrs := netlink.FilterAttrs{
+				LinkIndex: ipvlan.Attrs().Index,
+				Parent:    netlink.HANDLE_MIN_INGRESS,
+				Handle:    netlink.MakeHandle(0, 1),
+				Protocol:  3,
+				Priority:  1,
+			}
+			filter := &netlink.BpfFilter{
+				FilterAttrs:  filterAttrs,
+				Fd:           prog.FD(),
+				Name:         "ingressPolEntry",
+				DirectAction: true,
+			}
+			if err = netlink.FilterAdd(filter); err != nil {
+				prog.Close()
+				return fmt.Errorf("failed to create cls_bpf filter on %q: %s", dstIfName, err)
+			}
+		}
 		return nil
 	})
 	if err != nil {
@@ -217,7 +257,7 @@ func createIpvlanSlave(lxcIfName string, mtu, masterDev int, mode string, ep *mo

 // CreateAndSetupIpvlanSlave creates an ipvlan slave device for the given
 // master device, moves it to the given network namespace, and finally
-// initializes it (see setupIpvlanInRemoteNs).
+// initializes it (see SetupIpvlanInRemoteNs).
 func CreateAndSetupIpvlanSlave(id string, slaveIfName string, netNs ns.NetNS, mtu int, masterDev int, mode string, ep *models.EndpointChangeRequest) (*ebpf.Map, error) {
 	var tmpIfName string

@@ -236,7 +276,7 @@ func CreateAndSetupIpvlanSlave(id string, slaveIfName string, netNs ns.NetNS, mt
 		return nil, fmt.Errorf("unable to move ipvlan slave '%v' to netns: %s", link, err)
 	}

-	m, err := setupIpvlanInRemoteNs(netNs, tmpIfName, slaveIfName)
+	m, err := SetupIpvlanInRemoteNs(netNs, tmpIfName, slaveIfName, false, true)
 	if err != nil {
 		return nil, fmt.Errorf("unable to setup ipvlan slave in remote netns: %w", err)
 	}
diff --git a/pkg/datapath/linux/config/config.go b/pkg/datapath/linux/config/config.go
index edd93fc..a790e12 100644
--- a/pkg/datapath/linux/config/config.go
+++ b/pkg/datapath/linux/config/config.go
@@ -781,10 +781,12 @@ func (h *HeaderfileWriter) writeTemplateConfig(fw *bufio.Writer, e datapath.Endp

 	fmt.Fprintf(fw, "#define HOST_EP_ID %d\n", uint32(node.GetEndpointID()))

+	if e.RequireARPPassthrough() {
+		fmt.Fprint(fw, "#define ENABLE_ARP_PASSTHROUGH 1\n")
+	}
+
 	if !e.HasIpvlanDataPath() {
-		if e.RequireARPPassthrough() {
-			fmt.Fprint(fw, "#define ENABLE_ARP_PASSTHROUGH 1\n")
-		} else {
+		if !e.RequireARPPassthrough() {
 			fmt.Fprint(fw, "#define ENABLE_ARP_RESPONDER 1\n")
 		}

diff --git a/pkg/datapath/loader/loader.go b/pkg/datapath/loader/loader.go
index 9dee5e8..9cab732 100644
--- a/pkg/datapath/loader/loader.go
+++ b/pkg/datapath/loader/loader.go
@@ -301,7 +301,7 @@ func (l *Loader) reloadDatapath(ctx context.Context, ep datapath.Endpoint, dirs
 			return err
 		}
 	} else if ep.HasIpvlanDataPath() {
-		if err := graftDatapath(ctx, ep.MapPath(), objPath, symbolFromEndpoint); err != nil {
+		if err := graftDatapath(ctx, ep.MapPath(), objPath, symbolFromEndpoint, 0); err != nil {
 			scopedLog := ep.Logger(Subsystem).WithFields(logrus.Fields{
 				logfields.Path: objPath,
 			})
@@ -313,6 +313,20 @@ func (l *Loader) reloadDatapath(ctx context.Context, ep datapath.Endpoint, dirs
 			}
 			return err
 		}
+		if ep.RequireEgressProg() {
+			if err := graftDatapath(ctx, ep.MapPath(), objPath, symbolToEndpoint, 1); err != nil {
+				scopedLog := ep.Logger(Subsystem).WithFields(logrus.Fields{
+					logfields.Path: objPath,
+				})
+				// Don't log an error here if the context was canceled or timed out;
+				// this log message should only represent failures with respect to
+				// loading the program.
+				if ctx.Err() == nil {
+					scopedLog.WithError(err).Warn("JoinEP: Failed to load program")
+				}
+				return err
+			}
+		}
 	} else {
 		if err := replaceDatapath(ctx, ep.InterfaceName(), objPath, symbolFromEndpoint, dirIngress, false, ""); err != nil {
 			scopedLog := ep.Logger(Subsystem).WithFields(logrus.Fields{
diff --git a/pkg/datapath/loader/netlink.go b/pkg/datapath/loader/netlink.go
index 381e1fb..67bbe72 100644
--- a/pkg/datapath/loader/netlink.go
+++ b/pkg/datapath/loader/netlink.go
@@ -18,6 +18,7 @@ import (
 	"context"
 	"fmt"
 	"net"
+	"strconv"

 	"github.com/cilium/cilium/pkg/bpf"
 	"github.com/cilium/cilium/pkg/command/exec"
@@ -119,7 +120,7 @@ func replaceDatapath(ctx context.Context, ifName, objPath, progSec, progDirectio
 }

 // graftDatapath replaces obj in tail call map
-func graftDatapath(ctx context.Context, mapPath, objPath, progSec string) error {
+func graftDatapath(ctx context.Context, mapPath, objPath, progSec string, key int) error {
 	var err error

 	// FIXME: Replace cilium-map-migrate with Golang map migration
@@ -142,8 +143,7 @@ func graftDatapath(ctx context.Context, mapPath, objPath, progSec string) error
 	}()

 	// FIXME: replace exec with native call
-	// FIXME: only key 0 right now, could be made more flexible
-	args := []string{"exec", "bpf", "graft", mapPath, "key", "0",
+	args := []string{"exec", "bpf", "graft", mapPath, "key", strconv.FormatInt(int64(key), 10),
 		"obj", objPath, "sec", progSec,
 	}
 	cmd = exec.CommandContext(ctx, "tc", args...).WithFilters(libbpfFixupMsg)
diff --git a/pkg/option/config.go b/pkg/option/config.go
index acb576a..0bc22a2 100644
--- a/pkg/option/config.go
+++ b/pkg/option/config.go
@@ -2686,16 +2686,16 @@ func (c *DaemonConfig) Populate() {
 		}
 	}

-	switch c.IPAM {
-	case ipamOption.IPAMKubernetes, ipamOption.IPAMClusterPool:
-		if c.EnableIPv4 {
-			c.K8sRequireIPv4PodCIDR = true
-		}
-
-		if c.EnableIPv6 {
-			c.K8sRequireIPv6PodCIDR = true
-		}
-	}
+	//switch c.IPAM {
+	//case ipamOption.IPAMKubernetes, ipamOption.IPAMClusterPool:
+	//	if c.EnableIPv4 {
+	//		c.K8sRequireIPv4PodCIDR = true
+	//	}
+	//
+	//	if c.EnableIPv6 {
+	//		c.K8sRequireIPv6PodCIDR = true
+	//	}
+	//}

 	c.KubeProxyReplacementHealthzBindAddr = viper.GetString(KubeProxyReplacementHealthzBindAddr)

diff --git a/plugins/cilium-cni/chaining/cello/cello.go b/plugins/cilium-cni/chaining/cello/cello.go
new file mode 100644
index 0000000..354942d
--- /dev/null
+++ b/plugins/cilium-cni/chaining/cello/cello.go
@@ -0,0 +1,157 @@
+package cello
+
+import (
+	"context"
+	"fmt"
+	"github.com/cilium/cilium/api/v1/models"
+	"github.com/cilium/cilium/pkg/datapath/connector"
+	endpointid "github.com/cilium/cilium/pkg/endpoint/id"
+	"github.com/cilium/cilium/pkg/logging"
+	"github.com/cilium/cilium/pkg/logging/logfields"
+	chainingapi "github.com/cilium/cilium/plugins/cilium-cni/chaining/api"
+	cniTypesVer "github.com/containernetworking/cni/pkg/types/current"
+	cniVersion "github.com/containernetworking/cni/pkg/version"
+	"github.com/containernetworking/plugins/pkg/ns"
+	"github.com/sirupsen/logrus"
+	"github.com/vishvananda/netlink"
+)
+
+var (
+	name = "cello-chainer"
+	log = logging.DefaultLogger.WithField(logfields.LogSubsys, name)
+)
+
+type CelloChainer struct {}
+
+func (c *CelloChainer) ImplementsAdd() bool {
+	return true
+}
+
+// Add setups the ipvlan port's tc-bpf
+func (c *CelloChainer) Add(ctx context.Context, pluginCtx chainingapi.PluginContext) (res *cniTypesVer.Result, err error) {
+	err = cniVersion.ParsePrevResult(&pluginCtx.NetConf.NetConf)
+	if err != nil {
+		err = fmt.Errorf("unable to understand network config: %s", err)
+		return
+	}
+	var result *cniTypesVer.Result
+	result, err = cniTypesVer.NewResultFromResult(pluginCtx.NetConf.PrevResult)
+	if err != nil {
+		err = fmt.Errorf("unable to get previous network result: %s", err)
+		return
+	}
+	defer func() {
+		if err != nil {
+			pluginCtx.Logger.WithError(err).
+				WithFields(logrus.Fields{"cni-pre-result": pluginCtx.NetConf.PrevResult}).
+				Errorf("Unable to create endpoint")
+		}
+	}()
+
+	netNs, err := ns.GetNS(pluginCtx.Args.Netns)
+	if err != nil {
+		err = fmt.Errorf("failed to open netns %q: %s", pluginCtx.Args.Netns, err)
+		return
+	}
+	defer netNs.Close()
+
+	var (
+		ifName                    = ""
+		containerIP, containerMac string
+		containerIfIndex          int
+		disabled                  = false
+	)
+
+	if len(result.Interfaces) == 0 {
+		err = fmt.Errorf("unable to get previous network interface: %v", result)
+		return
+	}
+	ifName = result.Interfaces[0].Name
+
+	if err = netNs.Do(func(_ ns.NetNS) error {
+		link, err := netlink.LinkByName(ifName)
+		if err != nil {
+			return fmt.Errorf("failed to list link %s", pluginCtx.Args.Netns)
+		}
+		containerMac = link.Attrs().HardwareAddr.String()
+		containerIfIndex = link.Attrs().Index
+
+		addrs, err := netlink.AddrList(link, netlink.FAMILY_V4)
+		if err != nil {
+			return fmt.Errorf("unable to list addresses for link %s: %s", link.Attrs().Name, err)
+		}
+		if len(addrs) < 1 {
+			return fmt.Errorf("no address configured inside container")
+		}
+		containerIP = addrs[0].IPNet.IP.String()
+
+		return nil
+	}); err != nil {
+		return
+	}
+
+	// set bpf
+	m, err := connector.SetupIpvlanInRemoteNs(netNs, ifName, ifName, true, true)
+	if err != nil {
+		pluginCtx.Logger.WithError(err).Warn("Unable to set ipvlan ebpf")
+		return
+	}
+	defer m.Close()
+	mapID, err := m.ID()
+	if err != nil {
+		return nil, fmt.Errorf("failed to get map ID: %w", err)
+	}
+
+	// create endpoint
+	ep := &models.EndpointChangeRequest{
+		Addressing: &models.AddressPair{
+			IPV4: containerIP,
+		},
+		ContainerID:       pluginCtx.Args.ContainerID,
+		State:             models.EndpointStateWaitingForIdentity,
+		HostMac:           containerMac,
+		InterfaceIndex:    int64(containerIfIndex),
+		Mac:               containerMac,
+		InterfaceName:     ifName,
+		K8sPodName:        string(pluginCtx.CniArgs.K8S_POD_NAME),
+		K8sNamespace:      string(pluginCtx.CniArgs.K8S_POD_NAMESPACE),
+		SyncBuildEndpoint: true,
+		DatapathMapID:     int64(mapID),
+		DatapathConfiguration: &models.EndpointDatapathConfiguration{
+			RequireArpPassthrough: true,
+			RequireEgressProg:     true,
+			ExternalIpam:          true,
+			RequireRouting:        &disabled,
+		},
+	}
+
+	err = pluginCtx.Client.EndpointCreate(ep)
+	if err != nil {
+		pluginCtx.Logger.WithError(err).WithFields(logrus.Fields{
+			logfields.ContainerID: ep.ContainerID}).Warn("Unable to create endpoint")
+		err = fmt.Errorf("unable to create endpoint: %s", err)
+		return
+	}
+
+	pluginCtx.Logger.WithFields(logrus.Fields{
+		logfields.ContainerID: ep.ContainerID}).Debug("Endpoint successfully created")
+
+	res = result
+	return
+}
+
+func (c *CelloChainer) ImplementsDelete() bool {
+	return true
+}
+
+func (c *CelloChainer) Delete(ctx context.Context, pluginCtx chainingapi.PluginContext) (err error) {
+	id := endpointid.NewID(endpointid.ContainerIdPrefix, pluginCtx.Args.ContainerID)
+	if err := pluginCtx.Client.EndpointDelete(id); err != nil {
+		log.WithError(err).Warning("Errors encountered while deleting endpoint")
+	}
+	return nil
+}
+
+func init()  {
+	chainingapi.Register(name, &CelloChainer{})
+}
\ No newline at end of file
diff --git a/plugins/cilium-cni/cilium-cni.go b/plugins/cilium-cni/cilium-cni.go
index ca5b2bd..0ebde5d 100644
--- a/plugins/cilium-cni/cilium-cni.go
+++ b/plugins/cilium-cni/cilium-cni.go
@@ -40,6 +40,7 @@ import (
 	chainingapi "github.com/cilium/cilium/plugins/cilium-cni/chaining/api"
 	_ "github.com/cilium/cilium/plugins/cilium-cni/chaining/awscni"
 	_ "github.com/cilium/cilium/plugins/cilium-cni/chaining/azure"
+	_ "github.com/cilium/cilium/plugins/cilium-cni/chaining/cello"
 	_ "github.com/cilium/cilium/plugins/cilium-cni/chaining/flannel"
 	_ "github.com/cilium/cilium/plugins/cilium-cni/chaining/generic-veth"
 	_ "github.com/cilium/cilium/plugins/cilium-cni/chaining/portmap"
diff --git a/vendor/k8s.io/apimachinery/pkg/util/uuid/uuid.go b/vendor/k8s.io/apimachinery/pkg/util/uuid/uuid.go
new file mode 100644
index 0000000..1fa351a
--- /dev/null
+++ b/vendor/k8s.io/apimachinery/pkg/util/uuid/uuid.go
@@ -0,0 +1,27 @@
+/*
+Copyright 2014 The Kubernetes Authors.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+*/
+
+package uuid
+
+import (
+	"github.com/google/uuid"
+
+	"k8s.io/apimachinery/pkg/types"
+)
+
+func NewUUID() types.UID {
+	return types.UID(uuid.New().String())
+}
diff --git a/vendor/modules.txt b/vendor/modules.txt
index 45240ae..f4ef049 100644
--- a/vendor/modules.txt
+++ b/vendor/modules.txt
@@ -1058,6 +1058,7 @@ k8s.io/apimachinery/pkg/util/net
 k8s.io/apimachinery/pkg/util/runtime
 k8s.io/apimachinery/pkg/util/sets
 k8s.io/apimachinery/pkg/util/strategicpatch
+k8s.io/apimachinery/pkg/util/uuid
 k8s.io/apimachinery/pkg/util/validation
 k8s.io/apimachinery/pkg/util/validation/field
 k8s.io/apimachinery/pkg/util/wait
--
2.32.0 (Apple Git-132)

